print_error() {
    echo "$@" >&2
}

exit_if_fail() {
    local cmd=$@
    $cmd
    local status=$?
    if [[ $status -ne 0 ]]; then
        print_error "failed ($status): $cmd"
        exit $status
    fi
    return $status
}

sleep_while() {
    while eval "$@"; do
        sleep 0.5
    done
}

sleep_until() {
    until eval "$@"; do
        sleep 0.5
    done
}

# Usage:
#   ary=(a bb ccc)
#   $(join , "${ary[@]}")
#   => "a,bb,ccc"
join() {
    local IFS="$1"
    shift
    echo "$*"
}

cmd_exists() {
    [[ -z $1 ]] && print_error "cmd_exists(): expects command name as the parameter" && return 1
    [[ -n $(command -v $1) ]]
}

fn_exists() {
    [[ -z $1 ]] && print_error "fn_exists(): expects function name as the parameter" && return 1
    [[ $(type -t "$1") = function ]]
}

gem_search_paths() {
    local paths=() gem_base_dir="$(gem env gemdir)"
    [[ -d $gem_base_dir ]] && paths+=("$gem_base_dir")
    [[ ${#paths[@]} -le 0 ]] && print_error "gem_search_paths(): no gem paths found" && return 1
    echo "${paths[@]}"
}

gemdoc() {
    [[ -z $1 ]] && print_error "gemdoc(): expects gem and its version as the parameter" && return 1

    local last gems found
    found=0
    for path in $(gem_search_paths); do
        gems=("$path"/doc/$1*/rdoc/index.html)
        last=${gems[@]: -1}
        if [[ -r $last ]]; then
            found=1
            break
        fi
    done
    if [[ $found -ne 0 ]]; then
        open "$last"
    else
        echo "not found"
    fi
}

_gemdoc() {
    local gemdocs=()
    for path in $(gem_search_paths); do
        gemdocs+=($(\find "$path/doc" -name '*' -type d -depth 1 -exec basename '{}' ';'))
    done
    echo "${gemdocs[@]}"
}

complete -W '$(_gemdoc)' gemdoc

gemedit() {
    [[ -z $1 ]] && print_error "gemedit(): expects gem and its version as the parameter" && return 1

    local last gems found
    found=0
    for path in $(gem_search_paths); do
        gems=("$path"/gems/$1*)
        last=${gems[@]: -1}
        if [[ -d $last ]]; then
            found=1
            break
        fi
    done
    if [[ $found -ne 0 ]]; then
        $EDITOR "$last"
    else
        echo "not found"
    fi
}

_gemedit() {
    local gems=()
    for path in $(gem_search_paths); do
        gems+=($(\find "$path/gems" -name '*' -type d -depth 1 -exec basename '{}' ';'))
    done
    echo "${gems[@]}"
}

complete -W '$(_gemedit)' gemedit

gemdir() {
    pushd "$(gem env gemdir)/gems"
}

chjava() {
    local home

    if [[ -z $1 ]]; then
        /usr/libexec/java_home -V
        return
    fi

    home=$(/usr/libexec/java_home --failfast -v "$1")

    if [[ $? -eq 0 ]]; then
        echo "Using JVM in $home"
        export JAVA_HOME=$home
    fi
}

is_color_term() {
    local colors=$(tput colors 2>/dev/null)
    [[ $? -eq 0 ]] && [[ $colors -ge 8 ]]
}

is_root() {
    [[ $(whoami) = "root" ]]
}

set_prompt() {
    local ansi_b_green="\[\e[1;32m\]"
    local ansi_b_red="\[\e[1;31m\]"
    local ansi_b_yellow="\[\e[1;33m\]"
    local ansi_green="\[\e[0;32m\]"
    local ansi_reset="\[\e[0m\]"

    local user_and_host pwd end git ruby

    if is_color_term; then
        user_and_host="${ansi_green}[\u@\h]${ansi_reset} "
        pwd="${ansi_b_yellow}[\w]${ansi_reset} "
        if is_root; then
            end="${ansi_b_red}#${ansi_reset} "
        else
            end="${ansi_b_green}\$${ansi_reset} "
        fi
    else
        user_and_host="[\u@\h] "
        pwd="[\w] "
        if is_root; then
            end="# "
        else
            end="$ "
        fi
    fi

    fn_exists __git_ps1 && git="$(__git_ps1 '[git: %s] ')"
    cmd_exists chruby && ruby="[$(chruby | grep '\* ' | cut -d ' ' -f 3)] "

    PS1="${user_and_host}${pwd}${git}${ruby}\n${end}"
}

set_title() {
    echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"
}
