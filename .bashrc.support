tkareine_print_error() {
    echo "$@" >&2
}

tkareine_exit_if_fail() {
    local cmd=$@
    $cmd
    local status=$?
    if [[ $status -ne 0 ]]; then
        tkareine_print_error "failed ($status): $cmd"
        exit $status
    fi
    return $status
}

tkareine_sleep_while() {
    while eval "$@"; do
        sleep 0.5
    done
}

tkareine_sleep_until() {
    until eval "$@"; do
        sleep 0.5
    done
}

# Usage:
#   ary=(a bb ccc)
#   $(tkareine_join , "${ary[@]}")
#   => "a,bb,ccc"
tkareine_join() {
    local IFS="$1"
    shift
    echo "$*"
}

tkareine_cmd_exist() {
    [[ -z $1 ]] && tkareine_print_error "tkareine_cmd_exist(): expects command name as the parameter" && return 1
    command -v "$1" &> /dev/null
}

tkareine_fn_exist() {
    [[ -z $1 ]] && tkareine_print_error "tkareine_fn_exist(): expects function name as the parameter" && return 1
    [[ $(type -t "$1") == "function" ]]
}

tkareine_gem_search_paths() {
    local paths=() gem_base_dir="$(gem env gemdir)"
    [[ -d $gem_base_dir ]] && paths+=("$gem_base_dir")
    [[ ${#paths[@]} -le 0 ]] && tkareine_print_error "tkareine_gem_search_paths(): no gem paths found" && return 1
    echo "${paths[@]}"
}

gemdoc() {
    [[ -z $1 ]] && tkareine_print_error "gemdoc(): expects gem and its version as the parameter" && return 1

    local last gems found
    found=0
    for path in $(tkareine_gem_search_paths); do
        gems=("$path"/doc/$1*/rdoc/index.html)
        last=${gems[@]: -1}
        if [[ -r $last ]]; then
            found=1
            break
        fi
    done
    if [[ $found -ne 0 ]]; then
        open "$last"
    else
        echo "not found"
    fi
}

tkareine__complete_gemdocs() {
    local gemdocs=()
    for path in $(tkareine_gem_search_paths); do
        gemdocs+=($(\find "$path/doc" -name '*' -type d -depth 1 -exec basename '{}' ';'))
    done
    echo "${gemdocs[@]}"
}

complete -W '$(tkareine__complete_gemdocs)' gemdoc

gemedit() {
    [[ -z $1 ]] && tkareine_print_error "gemedit(): expects gem and its version as the parameter" && return 1

    local last gems found
    found=0
    for path in $(tkareine_gem_search_paths); do
        gems=("$path"/gems/$1*)
        last=${gems[@]: -1}
        if [[ -d $last ]]; then
            found=1
            break
        fi
    done
    if [[ $found -ne 0 ]]; then
        $EDITOR "$last"
    else
        echo "not found"
    fi
}

tkareine__complete_gemedits() {
    local gems=()
    for path in $(tkareine_gem_search_paths); do
        gems+=($(\find "$path/gems" -name '*' -type d -depth 1 -exec basename '{}' ';'))
    done
    echo "${gems[@]}"
}

complete -W '$(tkareine__complete_gemedits)' gemedit

gemdir() {
    pushd "$(gem env gemdir)/gems"
}
