# new file permissions: read-write for you, read for group, read for others
umask 0022

# localization
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# disable core dumps; to enable them: `ulimit -S -c unlimited`
ulimit -S -c 0

if [[ $tk__uname == "Darwin" ]]; then
    # soft limit for the maximum number of open file descriptors
    ulimit -S -n 10240

    # tar does not copy "._*" files
    export COPYFILE_DISABLE=true

    chjava() {
        local tool_path=/usr/libexec/java_home
        local tool_opts=()

        case ${1:-} in
            -h|-\?|--help)
                cat << EOF
Usage: chjava [JAVA_VERSION|default]
EOF
                return
                ;;
            '')
                "$tool_path" -V
                return
                ;;
            default)
                tool_opts+=(--failfast)
                ;;
            *)
                tool_opts+=(--failfast)
                tool_opts+=(-v)
                tool_opts+=("$1")
                ;;
        esac

        local java_home
        # macOS Big Sur: run `java_home` with empty environment
        # variables (`env -i`): if $JAVA_HOME is already set, the tool
        # returns the existing value in $JAVA_HOME regardless of
        # options.
        java_home=$(env -i "$tool_path" "${tool_opts[@]}") || return 1

        local manpath=:$MANPATH:
        manpath=${manpath//:$JAVA_HOME\/man:/:}
        manpath=${manpath#:}
        manpath=${manpath%:}

        export JAVA_HOME=$java_home
        export MANPATH=${java_home}/man${manpath:+:$manpath}
    }

    tk_current_java_version() {
        [[ -z $JAVA_HOME ]] && return 1

        local version
        version=${JAVA_HOME%.jdk/*}
        version=${version##*/}
        version=${version#jdk}

        echo "$version"
    }

    if [[ -x ~/brew/bin/brew ]]; then
      tk__setup_brew() {
          tk__brew_path=$1

          export HOMEBREW_NO_INSECURE_REDIRECT=1
          export HOMEBREW_NO_ANALYTICS=1

          # for security, put all brew-installed tools after system paths
          export PATH="$PATH:$tk__brew_path/bin"

          # Put selected brew-installed tools before system paths. You can
          # find the paths with `brew --prefix $tool`. Use pre-calculated
          # paths, as `brew --prefix` is slow.
          local tool_subpath
          for tool_subpath in opt/bash \
                                  opt/ctags \
                                  opt/gettext \
                                  opt/git \
                                  opt/kubernetes-cli \
                                  opt/libpq \
                                  opt/libressl \
                                  opt/python@3 \
                              ; do
              local path=${tk__brew_path}/${tool_subpath}/bin
              [[ -d $path && -x $path ]] && export PATH="$path:$PATH"
          done

          # install chnode
          local chnode_path=${tk__brew_path}/opt/chnode/share/chnode/chnode.sh
          [[ -r $chnode_path ]] && source "$chnode_path"

          # install chruby
          local chruby_path=${tk__brew_path}/opt/chruby/share/chruby/chruby.sh
          [[ -r $chruby_path ]] && source "$chruby_path"
      }

      tk__setup_brew ~/brew
      unset tk__setup_brew
    fi
fi

# my local executables
[[ -d ~/bin ]] && export PATH=~/bin:"$PATH"

# set manpath to contain system paths
export MANPATH=:

# Apache Maven
[[ -d ~/.m2/repository ]] && export M2_REPO=~/.m2/repository

# ripgrep (rg)
[[ -r ~/.ripgreprc ]] && export RIPGREP_CONFIG_PATH=~/.ripgreprc

# select Node.js if chnode is installed
tk_cmd_exist chnode && chnode node-14

# select Ruby if chruby is installed
tk_cmd_exist chruby && chruby ruby-3

# select Java if chjava is installed
tk_cmd_exist chjava && chjava default
