#!/usr/bin/env bash

set -euo pipefail

THIS_SCRIPT=${0##*/}
OPENSSL_BIN=${OPENSSL_BIN:-openssl}
DEFAULT_PORT=443

s_client_opts=()

parse_http_proxy() {
    local res=$1 nc=0
    shopt -q nocasematch && { nc=1 || shopt -s nocasematch; }
    res=${res#"http://"}
    res=${res#"https://"}
    res=${res%%/*}
    ((nc)) || shopt -u nocasematch
    echo "$res"
}

if [[ -n ${https_proxy:-} ]]; then
  proxy=$(parse_http_proxy "$https_proxy")
  echo "Using proxy from \$https_proxy: $proxy" >&2
  s_client_opts+=("-proxy" "$proxy")
  unset proxy
fi

print_usage() {
cat << EOF
Usage:
  $THIS_SCRIPT verifycert host [-p port] [-s servername]
  $THIS_SCRIPT showcert host [-p port] [-s servername]
  $THIS_SCRIPT -h

OpenSSL utilities.

    -h, --help        display this help and exit
    -p, --port        host port to connect to, defaults to $DEFAULT_PORT
    -s, --servername  name for TLS Server Name Indication, defaults to host

Use the OPENSSL_BIN environment variable to point to openssl if it's not
available in PATH. For example:

  OPENSSL_BIN=/opt/bin/openssl $THIS_SCRIPT ...

If the https_proxy environment variable is set, uses that as the proxy
automatically.
EOF
}

print_error() {
    echo -e "$@" >&2
}

error_exit() {
    print_error "$2"
    exit "$1"
}

error_usage_exit() {
    print_error "$1\\n"
    print_usage
    exit 2
}

cmd_exist() {
    command -v "$1" &>/dev/null
}

parse_s_client_args() {
    local subcommand=$1

    shift

    # variables external to this function
    host=
    port=$DEFAULT_PORT
    servername=

    while (( $# > 0 )); do
        case ${1:-} in
            -h|-\?|--help)
                print_usage
                exit
                ;;
            -p|--port)
                [[ -z ${2:-} ]] && error_usage_exit "$THIS_SCRIPT $subcommand: no argument given for --port"
                port=$2
                shift
                ;;
            -s|--servername)
                [[ -z ${2:-} ]] && error_usage_exit "$THIS_SCRIPT $subcommand: no argument given for --servername"
                servername=$2
                shift
                ;;
            *)
                [[ -n $host ]] && error_usage_exit "$THIS_SCRIPT $subcommand: no other arguments allowed"
                host=${1:-}
        esac

        shift
    done

    [[ -z $host ]] && error_usage_exit "$THIS_SCRIPT $subcommand: no host argument given"

    if [[ -z $servername ]]; then
        servername=$host
    fi

    true
}

cmd_verifycert() {
    local host port servername

    parse_s_client_args verifycert "$@"

    echo "" \
        | "$OPENSSL_BIN" s_client \
                         "${s_client_opts[@]}" \
                         -no_ssl2 \
                         -no_ssl3 \
                         -verify 9 \
                         -verify_return_error \
                         -servername "$servername" \
                         -connect "$host:$port"
}

cmd_showcert() {
    local host port servername

    parse_s_client_args showcert "$@"

    echo "" \
        | "$OPENSSL_BIN" s_client \
                         "${s_client_opts[@]}" \
                         -no_ssl2 \
                         -no_ssl3 \
                         -servername "$servername" \
                         -connect "$host:$port" \
                         2>/dev/null \
        | "$OPENSSL_BIN" x509 -text
}

cmd_exist "$OPENSSL_BIN" || error_exit 3 "$THIS_SCRIPT: $OPENSSL_BIN not found"

while :; do
    case ${1:-} in
        -h|-\?|--help)
            print_usage
            exit
            ;;
        verifycert)
            shift
            cmd_verifycert "$@"
            exit
            ;;
        showcert)
            shift
            cmd_showcert "$@"
            exit
            ;;
        *)
            print_usage
            exit 2
    esac

    shift
done
