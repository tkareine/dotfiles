#!/usr/bin/env bash

set -euo pipefail

THIS_SCRIPT=${0##*/}
: "${OPENSSL_BIN=openssl}"
DEFAULT_PORT=443

print_usage() {
    cat <<EOF
Usage:
  $THIS_SCRIPT verifycert host [-p port] [-s servername]
  $THIS_SCRIPT showcert host [-p port] [-s servername]
  $THIS_SCRIPT -h

OpenSSL utilities.

    -h, --help        display this help and exit
    -p, --port        host port to connect to, defaults to $DEFAULT_PORT
    -s, --servername  name for TLS Server Name Indication, defaults to host

Use the OPENSSL_BIN environment variable to point to openssl if it's not
available in PATH. For example:

  OPENSSL_BIN=/opt/bin/openssl $THIS_SCRIPT ...

If the https_proxy environment variable is set, uses that as the proxy
to connect to the host automatically, unless the no_proxy environment
variable prohibits it.
EOF
}

print_error() {
    echo -e "$@" >&2
}

error_exit() {
    print_error "$2"
    exit "$1"
}

error_usage_exit() {
    print_error "$1\\n"
    print_usage
    exit 2
}

cmd_exist() {
    command -v "$1" &>/dev/null
}

parse_http_proxy() {
    local res=$1 nc=0
    shopt -q nocasematch && { nc=1 || shopt -s nocasematch; }
    res=${res#"http://"}
    res=${res#"https://"}
    res=${res%%/*}
    ((nc)) || shopt -u nocasematch
    echo "$res"
}

use_proxy() {
    local host=$1 no_proxy_hosts no_proxy_host
    IFS=', ' read -ra no_proxy_hosts <<<"${no_proxy:-}"
    for no_proxy_host in "${no_proxy_hosts[@]}"; do
        no_proxy_host=${no_proxy_host/#./*.}
        # shellcheck disable=SC2053
        if [[ $host == $no_proxy_host ]]; then
            return 1
        fi
    done
    return 0
}

parse_s_client_args() {
    local subcommand=$1 proxy

    shift

    # variables external to this function
    host=
    port=$DEFAULT_PORT
    servername=
    s_client_opts=()

    while (($# > 0)); do
        case ${1:-} in
        -h | -\? | --help)
            print_usage
            exit
            ;;
        -p | --port)
            [[ -z ${2:-} ]] && error_usage_exit "$THIS_SCRIPT $subcommand: no argument given for --port"
            port=$2
            shift
            ;;
        -s | --servername)
            [[ -z ${2:-} ]] && error_usage_exit "$THIS_SCRIPT $subcommand: no argument given for --servername"
            servername=$2
            shift
            ;;
        *)
            [[ -n $host ]] && error_usage_exit "$THIS_SCRIPT $subcommand: no other arguments allowed"
            host=${1:-}
            ;;
        esac

        shift
    done

    [[ -z $host ]] && error_usage_exit "$THIS_SCRIPT $subcommand: no host argument given"

    if [[ -z $servername ]]; then
        servername=$host
    fi

    if [[ -n ${https_proxy:-} ]]; then
        proxy=$(parse_http_proxy "$https_proxy")

        if use_proxy "$host"; then
            echo "Using proxy from \$https_proxy: $proxy" >&2
            s_client_opts+=("-proxy" "$proxy")
        fi
    fi

    return 0
}

cmd_verifycert() {
    local host port servername s_client_opts=()

    parse_s_client_args verifycert "$@"

    echo "" |
        "$OPENSSL_BIN" s_client \
            "${s_client_opts[@]}" \
            -no_ssl2 \
            -no_ssl3 \
            -verify 9 \
            -verify_return_error \
            -servername "$servername" \
            -connect "$host:$port"
}

cmd_showcert() {
    local host port servername s_client_opts=()

    parse_s_client_args showcert "$@"

    echo "" |
        "$OPENSSL_BIN" s_client \
            "${s_client_opts[@]}" \
            -no_ssl2 \
            -no_ssl3 \
            -servername "$servername" \
            -connect "$host:$port" \
            2>/dev/null |
        "$OPENSSL_BIN" x509 -text
}

cmd_exist "$OPENSSL_BIN" || error_exit 3 "$THIS_SCRIPT: $OPENSSL_BIN not found"

case ${1:-} in
-h | -\? | --help)
    print_usage
    exit
    ;;
verifycert)
    shift
    cmd_verifycert "$@"
    exit
    ;;
showcert)
    shift
    cmd_showcert "$@"
    exit
    ;;
*)
    print_usage
    exit 2
    ;;
esac
